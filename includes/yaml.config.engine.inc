<?php

/**
 * @file
 */

// Initializes the autoloader generated by composer.
$loader = require __DIR__ . '/../../vendor/autoload.php';
$loader->register();

use Symfony\Component\Config\FileLocator;
use Symfony\Component\Config\Loader\FileLoader;
use Symfony\Component\Config\ConfigCache;
use Symfony\Component\Config\Resource\FileResource;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Config\Loader\LoaderResolver;
use Symfony\Component\Config\Loader\DelegatingLoader;

class DruboneYamlConfigLoader extends FileLoader
{
  public function load($resource, $type = null)
  {
    return Yaml::parse(file_get_contents($resource));
  }

  public function supports($resource, $type = null)
  {
    return is_string($resource) && 'yaml' === pathinfo(
      $resource,
      PATHINFO_EXTENSION
    );
  }
}

function _drubone_yaml_get_config($name, $directories = array(), $file_patterns = array()) {
  $config = &_drubone_config();
  if (!$directories) {
    $directories = array(DRUBONE_DIR_FULL . '/config', DRUBONE_CONFIG_DIR_FULL);
  }
  if (!$file_patterns) {
    $file_patterns = array('local');
  }
  $cachePath = DRUBONE_DRUPAL_ROOT . '/' . $config['generated_config_path'] . '/' . "$name.drubone.config.inc";

  // the second argument indicates whether or not you want to use debug mode
  $cache = new ConfigCache($cachePath, TRUE);

  $resources = array();

  $config_file_code = array();

  if (!$cache->isFresh()) {
    foreach ($directories as $directory) {
      $files = array();
      $locator = new FileLocator(array($directory));
      $loaderResolver = new LoaderResolver(array(new DruboneYamlConfigLoader($locator)));
      $delegatingLoader = new DelegatingLoader($loaderResolver);

      $files[] = "$directory/$name.yaml";
      foreach($file_patterns as $pattern) {
        $files[] = "$directory/$pattern.$name.yaml";
      }
      foreach ($files as $file) {
        try {
          $config_file = $locator->locate($file, NULL, FALSE);
          $config_file_code[] = $delegatingLoader->load($config_file);
          $resources[] = new FileResource($config_file);
          $config['drubone_included_files'][] = $config_file;
        }
        catch (Exception $e) {
          // Config file not found.
        }
      }
    }

    if ($config_file_code) {
      $code[$name] = _drubone_array_deep_merge($config_file_code);
      $cache->write("<?php\n\nreturn " . var_export($code, TRUE) . ';', $resources);
    }
    else {
      $cachePath = FALSE;
    }
  }

  $config = array();

  if ($cachePath) {
    $config = include($cachePath);
    $config['drubone_included_files'][] = $cachePath;

  }

  return $config;
}
